{"version":3,"sources":["logo.svg","Components/ListItem/ListItem.js","Components/Input/input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","listItems","items","map","item","className","key","type","value","text","id","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","input","onChangetext","event","setState","currentItem","Date","now","addButton","preventDefault","console","log","state","newItem","fliteredItem","filter","UpdatedItem","chageBackground","style","background","this","placeholder","React","Component","library","add","faTrash","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,0NCsC5BC,MAhCf,SAAkBC,GAGV,IAEMC,EAFKD,EAAME,MAEIC,KAAI,SAAAC,GACrB,OAEI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACA,2BAAOC,KAAK,OAAOC,MAAOJ,EAAKK,KAAMC,GAAIN,EAAKE,IAAKK,SAAU,SAACC,GAAD,OAAKZ,EAAMa,UAAUD,EAAEE,OAAON,MAAMJ,EAAKE,QACtG,0BAAMD,UAAU,aAChB,kBAAC,IAAD,CAAiBA,UAAU,UAAUU,KAAK,QAC1CC,QAAS,kBAAIhB,EAAMiB,WAAWb,EAAKE,cAQ/C,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,KCuCFmB,G,wDAhEX,WAAYpB,GACX,IAAD,8BACI,cAAMA,IAUVqB,aAAa,SAACC,GACV,EAAKC,SAAS,CAACC,YAAY,CAACf,KAAKa,EAAMR,OAAON,MAC7CF,IAAImB,KAAKC,UAbd,EAgBAC,UAAU,SAACf,GACPA,EAAEgB,iBACFC,QAAQC,IAAI,EAAKC,MAAMP,YAAYf,MACnC,IAAMuB,EAAQ,EAAKD,MAAMP,YACzB,GAAkB,KAAfQ,EAAQvB,KACX,CACI,IAAMP,EAAM,GAAD,mBAAK,EAAK6B,MAAM7B,OAAhB,CAAsB8B,IACjC,EAAKT,SAAS,CACVrB,MAAMA,EACNsB,YAAY,CAACf,KAAK,GAAGH,IAAI,QAzBrC,EA8BAW,WAAW,SAACX,GACR,IAAM2B,EAAa,EAAKF,MAAM7B,MAAMgC,QAAO,SAAA9B,GAAI,OAAEA,EAAKE,MAAMA,KAC5D,EAAKiB,SAAS,CAACrB,MAAM+B,KAhCzB,EAkCApB,UAAU,SAACJ,EAAKH,GACZ,IAAM6B,EAAY,EAAKJ,MAAM7B,MAC7BiC,EAAYhC,KAAI,SAAAC,GACTA,EAAKE,KAAKA,IAETF,EAAKK,KAAKA,MAGlB,EAAKc,SAAS,CAACrB,MAAMiC,KA1CzB,EA6CAC,gBAAgB,SAACxB,GACbA,EAAEE,OAAOuB,MAAMC,WAAW,QA3C1B,EAAKP,MAAO,CACR7B,MAAM,GACNsB,YAAY,CACRf,KAAK,GACLH,IAAI,KAPhB,E,qDAkDI,OACI,yBAAKD,UAAU,cACX,gCACI,0BAAMK,GAAG,cACL,2BAAOC,SAAU4B,KAAKlB,aAAcd,KAAK,OAAOiC,YAAY,eAC5D,4BAAQxB,QAASuB,KAAKZ,UAAWpB,KAAK,SAASiC,YAAY,OAA3D,QAEJ,kBAAC,EAAD,CAAUtC,MAAOqC,KAAKR,MAAM7B,MAAOe,WAAYsB,KAAKtB,WAAYJ,UAAW0B,KAAK1B,kB,GA3DhF4B,IAAMC,Y,eCG1BC,IAAQC,IAAIC,KAUGC,MARf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,QCAc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.5d34f531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './ListItem.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\n\r\nfunction ListItem(props) {\r\n    \r\n   \r\n        const item=props.items;//Allocating our list to props \r\n\r\n        const listItems=item.map(item=>{\r\n            return (\r\n                \r\n                <div className=\"list\" key={item.key}>\r\n                    <p>\r\n                    <input type=\"text\" value={item.text} id={item.key} onChange={(e)=>props.setUpdate(e.target.value,item.key)}/>\r\n                    <span className=\"trashIcon\" >\r\n                    <FontAwesomeIcon className=\"faicons\" icon='trash'\r\n                    onClick={()=>props.deleteItem(item.key)}/>\r\n                     </span>\r\n                </p>\r\n                \r\n                </div>\r\n            )\r\n        })\r\n\r\n        return(\r\n            <div>\r\n                <FlipMove duration={300} easing=\"ease-in-out\">\r\n                {listItems}\r\n                 </FlipMove>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\nexport default ListItem;","import React from 'react'\r\nimport ListItem from '../ListItem/ListItem';\r\nimport './input.css'\r\n\r\nclass input extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n       \r\n        this.state ={\r\n            items:[],\r\n            currentItem:{\r\n                text:'',\r\n                key:''\r\n            }\r\n        }\r\n    }\r\n    onChangetext=(event)=>{\r\n        this.setState({currentItem:{text:event.target.value\r\n        ,key:Date.now()}})\r\n\r\n    }\r\n    addButton=(e)=>{\r\n        e.preventDefault();\r\n        console.log(this.state.currentItem.text);\r\n        const newItem=this.state.currentItem;\r\n        if(newItem.text!==\"\")\r\n        {\r\n            const items=[...this.state.items,newItem];\r\n            this.setState({\r\n                items:items,\r\n                currentItem:{text:'',key:''}\r\n            });\r\n        }\r\n        \r\n    }\r\n    deleteItem=(key)=>{\r\n        const fliteredItem=this.state.items.filter(item=>item.key!==key);\r\n        this.setState({items:fliteredItem});\r\n    }\r\n    setUpdate=(text,key)=>{\r\n        const UpdatedItem=this.state.items;\r\n        UpdatedItem.map(item=>{\r\n            if(item.key==key)\r\n            {\r\n                item.text=text;\r\n            }\r\n        })\r\n        this.setState({items:UpdatedItem});\r\n\r\n    }\r\n    chageBackground=(e)=>{\r\n        e.target.style.background='gray';\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className=\"inputClass\">\r\n                <header>\r\n                    <form id=\"to-do-form\">\r\n                        <input onChange={this.onChangetext} type=\"text\" placeholder=\"Enter Task\"/>\r\n                        <button onClick={this.addButton} type=\"submit\" placeholder=\"ADD\">ADD</button>\r\n                    </form>\r\n                    <ListItem items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default input;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Input from './Components/Input/input'\nimport {library} from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Input/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}